Terminals unused in grammar

   INTEGER_LITERAL
   PLUS
   MULT


Grammar

    0 $accept: input $end

    1 input: allCode

    2 allCode: %empty
    3        | NEW_LINE allCode
    4        | func allCode

    5 func: decl body

    6 body: caseCont

    7 caseCont: NEW_LINE
    8         | case caseCont

    9 case: F_NAME innerArg conditions EQ formula NEW_LINE

   10 innerArg: %empty
   11         | F_NAME innerArg

   12 conditions: %empty
   13           | OR formula conditions

   14 formula: %empty
   15        | F_NAME formula
   16        | SIGNS formula

   17 decl: F_NAME COL2 F_NAME args

   18 args: NEW_LINE
   19     | ARROW F_NAME args


Terminals, with rules where they appear

$end (0) 0
error (256)
INTEGER_LITERAL (258)
F_NAME (259) 9 11 15 17 19
SIGNS (260) 16
PLUS (261)
MULT (262)
COL2 (263) 17
ARROW (264) 19
NEW_LINE (265) 3 7 9 18
OR (266) 13
EQ (267) 9


Nonterminals, with rules where they appear

$accept (13)
    on left: 0
input (14)
    on left: 1, on right: 0
allCode (15)
    on left: 2 3 4, on right: 1 3 4
func (16)
    on left: 5, on right: 4
body (17)
    on left: 6, on right: 5
caseCont (18)
    on left: 7 8, on right: 6 8
case (19)
    on left: 9, on right: 8
innerArg (20)
    on left: 10 11, on right: 9 11
conditions (21)
    on left: 12 13, on right: 9 13
formula (22)
    on left: 14 15 16, on right: 9 13 15 16
decl (23)
    on left: 17, on right: 5
args (24)
    on left: 18 19, on right: 17 19


State 0

    0 $accept: . input $end

    F_NAME    shift, and go to state 1
    NEW_LINE  shift, and go to state 2

    $default  reduce using rule 2 (allCode)

    input    go to state 3
    allCode  go to state 4
    func     go to state 5
    decl     go to state 6


State 1

   17 decl: F_NAME . COL2 F_NAME args

    COL2  shift, and go to state 7


State 2

    3 allCode: NEW_LINE . allCode

    F_NAME    shift, and go to state 1
    NEW_LINE  shift, and go to state 2

    $default  reduce using rule 2 (allCode)

    allCode  go to state 8
    func     go to state 5
    decl     go to state 6


State 3

    0 $accept: input . $end

    $end  shift, and go to state 9


State 4

    1 input: allCode .

    $default  reduce using rule 1 (input)


State 5

    4 allCode: func . allCode

    F_NAME    shift, and go to state 1
    NEW_LINE  shift, and go to state 2

    $default  reduce using rule 2 (allCode)

    allCode  go to state 10
    func     go to state 5
    decl     go to state 6


State 6

    5 func: decl . body

    F_NAME    shift, and go to state 11
    NEW_LINE  shift, and go to state 12

    body      go to state 13
    caseCont  go to state 14
    case      go to state 15


State 7

   17 decl: F_NAME COL2 . F_NAME args

    F_NAME  shift, and go to state 16


State 8

    3 allCode: NEW_LINE allCode .

    $default  reduce using rule 3 (allCode)


State 9

    0 $accept: input $end .

    $default  accept


State 10

    4 allCode: func allCode .

    $default  reduce using rule 4 (allCode)


State 11

    9 case: F_NAME . innerArg conditions EQ formula NEW_LINE

    F_NAME  shift, and go to state 17

    $default  reduce using rule 10 (innerArg)

    innerArg  go to state 18


State 12

    7 caseCont: NEW_LINE .

    $default  reduce using rule 7 (caseCont)


State 13

    5 func: decl body .

    $default  reduce using rule 5 (func)


State 14

    6 body: caseCont .

    $default  reduce using rule 6 (body)


State 15

    8 caseCont: case . caseCont

    F_NAME    shift, and go to state 11
    NEW_LINE  shift, and go to state 12

    caseCont  go to state 19
    case      go to state 15


State 16

   17 decl: F_NAME COL2 F_NAME . args

    ARROW     shift, and go to state 20
    NEW_LINE  shift, and go to state 21

    args  go to state 22


State 17

   11 innerArg: F_NAME . innerArg

    F_NAME  shift, and go to state 17

    $default  reduce using rule 10 (innerArg)

    innerArg  go to state 23


State 18

    9 case: F_NAME innerArg . conditions EQ formula NEW_LINE

    OR  shift, and go to state 24

    $default  reduce using rule 12 (conditions)

    conditions  go to state 25


State 19

    8 caseCont: case caseCont .

    $default  reduce using rule 8 (caseCont)


State 20

   19 args: ARROW . F_NAME args

    F_NAME  shift, and go to state 26


State 21

   18 args: NEW_LINE .

    $default  reduce using rule 18 (args)


State 22

   17 decl: F_NAME COL2 F_NAME args .

    $default  reduce using rule 17 (decl)


State 23

   11 innerArg: F_NAME innerArg .

    $default  reduce using rule 11 (innerArg)


State 24

   13 conditions: OR . formula conditions

    F_NAME  shift, and go to state 27
    SIGNS   shift, and go to state 28

    $default  reduce using rule 14 (formula)

    formula  go to state 29


State 25

    9 case: F_NAME innerArg conditions . EQ formula NEW_LINE

    EQ  shift, and go to state 30


State 26

   19 args: ARROW F_NAME . args

    ARROW     shift, and go to state 20
    NEW_LINE  shift, and go to state 21

    args  go to state 31


State 27

   15 formula: F_NAME . formula

    F_NAME  shift, and go to state 27
    SIGNS   shift, and go to state 28

    $default  reduce using rule 14 (formula)

    formula  go to state 32


State 28

   16 formula: SIGNS . formula

    F_NAME  shift, and go to state 27
    SIGNS   shift, and go to state 28

    $default  reduce using rule 14 (formula)

    formula  go to state 33


State 29

   13 conditions: OR formula . conditions

    OR  shift, and go to state 24

    $default  reduce using rule 12 (conditions)

    conditions  go to state 34


State 30

    9 case: F_NAME innerArg conditions EQ . formula NEW_LINE

    F_NAME  shift, and go to state 27
    SIGNS   shift, and go to state 28

    $default  reduce using rule 14 (formula)

    formula  go to state 35


State 31

   19 args: ARROW F_NAME args .

    $default  reduce using rule 19 (args)


State 32

   15 formula: F_NAME formula .

    $default  reduce using rule 15 (formula)


State 33

   16 formula: SIGNS formula .

    $default  reduce using rule 16 (formula)


State 34

   13 conditions: OR formula conditions .

    $default  reduce using rule 13 (conditions)


State 35

    9 case: F_NAME innerArg conditions EQ formula . NEW_LINE

    NEW_LINE  shift, and go to state 36


State 36

    9 case: F_NAME innerArg conditions EQ formula NEW_LINE .

    $default  reduce using rule 9 (case)
